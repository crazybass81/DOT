rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get current user data from database
    function getCurrentUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if user has specific role
    function hasRole(role) {
      return isAuthenticated() && getCurrentUser().role == role;
    }
    
    // Check if user has any of the specified roles
    function hasAnyRole(roles) {
      return isAuthenticated() && getCurrentUser().role in roles;
    }
    
    // Check if user is active
    function isActiveUser() {
      return isAuthenticated() && getCurrentUser().status == 'ACTIVE';
    }
    
    // Check if user belongs to specific store
    function belongsToStore(storeId) {
      let user = getCurrentUser();
      return user.storeId == storeId || 
             (user.managedStoreIds != null && storeId in user.managedStoreIds);
    }
    
    // Check if user belongs to specific franchise
    function belongsToFranchise(franchiseId) {
      let user = getCurrentUser();
      return user.franchiseId == franchiseId || 
             (user.managedFranchiseIds != null && franchiseId in user.managedFranchiseIds);
    }
    
    // Check if user can manage another user
    function canManageUser(targetUserId) {
      let currentUser = getCurrentUser();
      let targetUser = get(/databases/$(database)/documents/users/$(targetUserId)).data;
      
      // Super admin can manage anyone
      if (currentUser.role == 'SUPER_ADMIN') {
        return true;
      }
      
      // Master admin can manage within their franchise
      if (currentUser.role == 'MASTER_ADMIN') {
        return targetUser.franchiseId == currentUser.franchiseId ||
               (currentUser.managedFranchiseIds != null && 
                targetUser.franchiseId in currentUser.managedFranchiseIds);
      }
      
      // Admin can manage within their store
      if (currentUser.role == 'ADMIN') {
        return targetUser.storeId == currentUser.storeId ||
               (currentUser.managedStoreIds != null && 
                targetUser.storeId in currentUser.managedStoreIds);
      }
      
      return false;
    }
    
    // Check if user can access store data
    function canAccessStore(storeId) {
      let user = getCurrentUser();
      
      // Super admin can access all stores
      if (user.role == 'SUPER_ADMIN') {
        return true;
      }
      
      // Check direct store access or managed stores
      return user.storeId == storeId || 
             (user.managedStoreIds != null && storeId in user.managedStoreIds);
    }
    
    // Check if user can access franchise data
    function canAccessFranchise(franchiseId) {
      let user = getCurrentUser();
      
      // Super admin can access all franchises
      if (user.role == 'SUPER_ADMIN') {
        return true;
      }
      
      // Check direct franchise access or managed franchises
      return user.franchiseId == franchiseId || 
             (user.managedFranchiseIds != null && franchiseId in user.managedFranchiseIds);
    }
    
    // ========== USER COLLECTION RULES ==========
    
    match /users/{userId} {
      // Users can read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can update their own profile (limited fields)
      allow update: if isAuthenticated() && 
                   request.auth.uid == userId && 
                   isActiveUser() &&
                   // Only allow updating specific fields
                   request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['displayName', 'phoneNumber', 'avatarUrl', 'preferences', 
                              'emergencyContact', 'emergencyPhone', 'address', 
                              'biometricEnabled', 'fcmToken', 'lastLoginAt', 'updatedAt']);
      
      // Admins can read users in their scope
      allow read: if isActiveUser() && 
                     (hasRole('SUPER_ADMIN') ||
                      (hasRole('MASTER_ADMIN') && belongsToFranchise(resource.data.franchiseId)) ||
                      (hasRole('ADMIN') && belongsToStore(resource.data.storeId)));
      
      // Admins can manage users in their scope
      allow write: if isActiveUser() && canManageUser(userId);
      
      // System can create user documents during registration
      allow create: if true; // Handled by Cloud Functions with proper validation
    }
    
    // ========== STORE COLLECTION RULES ==========
    
    match /stores/{storeId} {
      // Users can read their own store data
      allow read: if isActiveUser() && canAccessStore(storeId);
      
      // Only admins and above can write store data
      allow write: if isActiveUser() && 
                      (hasRole('SUPER_ADMIN') ||
                       (hasRole('MASTER_ADMIN') && belongsToFranchise(resource.data.franchiseId)) ||
                       (hasRole('ADMIN') && canAccessStore(storeId)));
    }
    
    // ========== FRANCHISE COLLECTION RULES ==========
    
    match /franchises/{franchiseId} {
      // Users can read their franchise data
      allow read: if isActiveUser() && canAccessFranchise(franchiseId);
      
      // Only master admins and above can write franchise data
      allow write: if isActiveUser() && 
                      (hasRole('SUPER_ADMIN') ||
                       (hasRole('MASTER_ADMIN') && canAccessFranchise(franchiseId)));
    }
    
    // ========== ATTENDANCE COLLECTION RULES ==========
    
    match /attendance/{attendanceId} {
      // Users can read their own attendance records
      allow read: if isActiveUser() && 
                     (request.auth.uid == resource.data.userId ||
                      canAccessStore(resource.data.storeId));
      
      // Users can create their own attendance records
      allow create: if isAuthenticated() && 
                       isActiveUser() && 
                       request.auth.uid == request.resource.data.userId &&
                       canAccessStore(request.resource.data.storeId);
      
      // Users can update their own pending attendance records
      allow update: if isAuthenticated() && 
                       isActiveUser() && 
                       request.auth.uid == resource.data.userId &&
                       resource.data.status == 'PENDING' &&
                       // Only allow updating specific fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['notes', 'updatedAt']);
      
      // Admins can approve/reject attendance in their scope
      allow update: if isActiveUser() && 
                       canAccessStore(resource.data.storeId) &&
                       hasAnyRole(['ADMIN', 'MASTER_ADMIN', 'SUPER_ADMIN']) &&
                       // Only allow status changes and approval fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['status', 'approvedBy', 'approvedAt', 'rejectedBy', 
                                  'rejectedAt', 'rejectionReason', 'updatedAt']);
    }
    
    // ========== ATTENDANCE SESSIONS COLLECTION RULES ==========
    
    match /attendance_sessions/{sessionId} {
      // Users can read their own attendance sessions
      allow read: if isActiveUser() && 
                     (request.auth.uid == resource.data.userId ||
                      canAccessStore(resource.data.storeId));
      
      // Users can create/update their own attendance sessions
      allow write: if isAuthenticated() && 
                      isActiveUser() && 
                      request.auth.uid == request.resource.data.userId &&
                      canAccessStore(request.resource.data.storeId);
      
      // Admins can read sessions in their scope
      allow read: if isActiveUser() && canAccessStore(resource.data.storeId);
    }
    
    // ========== ATTENDANCE STATS COLLECTION RULES ==========
    
    match /attendance_stats/{statsId} {
      // Users can read their own stats
      allow read: if isActiveUser() && 
                     (request.auth.uid == resource.data.userId ||
                      canAccessStore(get(/databases/$(database)/documents/users/$(resource.data.userId)).data.storeId));
      
      // Only system can write stats (via Cloud Functions)
      allow write: if false; // Managed by Cloud Functions only
    }
    
    // ========== NOTIFICATIONS COLLECTION RULES ==========
    
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid ||
                      resource.data.recipientIds.hasAny([request.auth.uid]));
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid ||
                        resource.data.recipientIds.hasAny([request.auth.uid])) &&
                       // Only allow updating read status
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['readBy', 'readAt', 'updatedAt']);
      
      // System and admins can create notifications
      allow create: if isActiveUser() && 
                       hasAnyRole(['ADMIN', 'MASTER_ADMIN', 'SUPER_ADMIN']);
    }
    
    // ========== SETTINGS COLLECTION RULES ==========
    
    match /settings/{settingId} {
      // Users can read settings for their scope
      allow read: if isActiveUser() && 
                     (settingId == 'global' ||
                      (settingId.matches('franchise_.*') && 
                       canAccessFranchise(settingId.split('_')[1])) ||
                      (settingId.matches('store_.*') && 
                       canAccessStore(settingId.split('_')[1])));
      
      // Only appropriate admins can write settings
      allow write: if isActiveUser() && 
                      (hasRole('SUPER_ADMIN') ||
                       (settingId.matches('franchise_.*') && 
                        hasAnyRole(['MASTER_ADMIN', 'SUPER_ADMIN']) &&
                        canAccessFranchise(settingId.split('_')[1])) ||
                       (settingId.matches('store_.*') && 
                        hasAnyRole(['ADMIN', 'MASTER_ADMIN', 'SUPER_ADMIN']) &&
                        canAccessStore(settingId.split('_')[1])));
    }
    
    // ========== AUDIT LOGS COLLECTION RULES ==========
    
    match /audit_logs/{logId} {
      // Only admins can read audit logs in their scope
      allow read: if isActiveUser() && 
                     hasAnyRole(['ADMIN', 'MASTER_ADMIN', 'SUPER_ADMIN']) &&
                     (hasRole('SUPER_ADMIN') ||
                      (resource.data.storeId != null && canAccessStore(resource.data.storeId)) ||
                      (resource.data.franchiseId != null && canAccessFranchise(resource.data.franchiseId)));
      
      // System creates audit logs (via Cloud Functions)
      allow create: if true; // Handled by Cloud Functions
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // ========== QR CODES COLLECTION RULES ==========
    
    match /qr_codes/{qrCodeId} {
      // Users can read QR codes for their store
      allow read: if isActiveUser() && canAccessStore(resource.data.storeId);
      
      // Admins can manage QR codes for their stores
      allow write: if isActiveUser() && 
                      hasAnyRole(['ADMIN', 'MASTER_ADMIN', 'SUPER_ADMIN']) &&
                      canAccessStore(request.resource.data.storeId);
    }
    
    // ========== REPORTS COLLECTION RULES ==========
    
    match /reports/{reportId} {
      // Users can read reports in their scope
      allow read: if isActiveUser() && 
                     (hasRole('SUPER_ADMIN') ||
                      (resource.data.storeId != null && canAccessStore(resource.data.storeId)) ||
                      (resource.data.franchiseId != null && canAccessFranchise(resource.data.franchiseId)) ||
                      (resource.data.userId == request.auth.uid));
      
      // Admins can create reports in their scope
      allow create: if isActiveUser() && 
                       hasAnyRole(['ADMIN', 'MASTER_ADMIN', 'SUPER_ADMIN']) &&
                       (hasRole('SUPER_ADMIN') ||
                        (request.resource.data.storeId != null && 
                         canAccessStore(request.resource.data.storeId)) ||
                        (request.resource.data.franchiseId != null && 
                         canAccessFranchise(request.resource.data.franchiseId)));
      
      // Reports are read-only after creation
      allow update, delete: if false;
    }
    
    // ========== TEMP UPLOADS COLLECTION RULES ==========
    
    match /temp_uploads/{uploadId} {
      // Users can manage their own temp uploads
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
      
      // Temp uploads expire automatically (via Cloud Functions)
    }
    
    // ========== DEFAULT DENY ALL ==========
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}