name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      include_prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  FLUTTER_VERSION: '3.16.0'
  NODE_VERSION: '18'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate and extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.include_prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            IS_PRERELEASE="false"
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"
      
      - name: Check if version exists
        run: |
          if git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
            echo "Version ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi
      
      - name: Validate changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! -f "CHANGELOG.md" ]]; then
            echo "CHANGELOG.md not found"
            exit 1
          fi
          
          if ! grep -q "$VERSION" CHANGELOG.md; then
            echo "Version $VERSION not found in CHANGELOG.md"
            exit 1
          fi

  build-release-artifacts:
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        platform: [android, web]
        environment: [staging, production]
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Build Android Release
        if: matrix.platform == 'android'
        run: |
          flutter build appbundle \
            --release \
            --build-name=${{ needs.validate-release.outputs.version }} \
            --build-number=${{ github.run_number }} \
            --dart-define=ENVIRONMENT=${{ matrix.environment }} \
            --obfuscate \
            --split-debug-info=build/debug-info/
      
      - name: Build Web Release
        if: matrix.platform == 'web'
        run: |
          flutter build web \
            --release \
            --dart-define=ENVIRONMENT=${{ matrix.environment }} \
            --web-renderer canvaskit
      
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.platform }}-${{ matrix.environment }}-${{ needs.validate-release.outputs.version }}
          path: |
            services/attendance/mobile/build/app/outputs/bundle/release/*.aab
            services/attendance/mobile/build/web/**
            services/attendance/mobile/build/debug-info/
          retention-days: 90

  build-ios-release:
    runs-on: macos-13
    needs: validate-release
    strategy:
      matrix:
        environment: [staging, production]
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.1'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Setup Code Signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Setup signing certificates (same as CD workflow)
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Build iOS Release
        run: |
          flutter build ipa \
            --release \
            --build-name=${{ needs.validate-release.outputs.version }} \
            --build-number=${{ github.run_number }} \
            --dart-define=ENVIRONMENT=${{ matrix.environment }}
      
      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-ios-${{ matrix.environment }}-${{ needs.validate-release.outputs.version }}
          path: |
            services/attendance/mobile/build/ios/ipa/*.ipa
          retention-days: 90
      
      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

  generate-release-notes:
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n1)
          
          if [[ -z "$PREVIOUS_TAG" ]]; then
            echo "No previous tag found, using initial commit"
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate release notes from commits
          RELEASE_NOTES="## What's Changed\n\n"
          
          # Get commits between tags
          COMMITS=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG".."HEAD" --reverse)
          
          if [[ -n "$COMMITS" ]]; then
            RELEASE_NOTES="$RELEASE_NOTES$COMMITS\n\n"
          fi
          
          # Add contributors
          CONTRIBUTORS=$(git log --pretty=format:"%an" "$PREVIOUS_TAG".."HEAD" | sort -u | sed 's/^/- @/')
          if [[ -n "$CONTRIBUTORS" ]]; then
            RELEASE_NOTES="$RELEASE_NOTES## Contributors\n\n$CONTRIBUTORS\n\n"
          fi
          
          # Add changelog section
          if grep -q "$VERSION" CHANGELOG.md; then
            CHANGELOG_SECTION=$(awk "/## \[?${VERSION#v}\]?/,/## \[?[0-9]+\.[0-9]+\.[0-9]+\]?/{if(/## \[?[0-9]+\.[0-9]+\.[0-9]+\]?/ && !/## \[?${VERSION#v}\]?/) exit; print}" CHANGELOG.md | tail -n +2)
            if [[ -n "$CHANGELOG_SECTION" ]]; then
              RELEASE_NOTES="$RELEASE_NOTES## Changelog\n\n$CHANGELOG_SECTION\n"
            fi
          fi
          
          # Save to output
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts, build-ios-release, generate-release-notes]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Compress and organize artifacts
          cd release-artifacts
          for dir in */; do
            if [[ -d "$dir" ]]; then
              cd "$dir"
              zip -r "../../release-assets/${dir%/}.zip" .
              cd ..
            fi
          done
          cd ..
          
          ls -la release-assets/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release_notes }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            release-assets/*.zip
          generate_release_notes: true
          make_latest: ${{ needs.validate-release.outputs.is_prerelease == 'false' }}

  deploy-to-stores:
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    strategy:
      matrix:
        store: [google-play, app-store]
        environment: [production]
    environment: ${{ matrix.store }}-${{ matrix.environment }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-${{ matrix.store == 'google-play' && 'android' || 'ios' }}-${{ matrix.environment }}-${{ needs.validate-release.outputs.version }}
          path: release-artifacts
      
      - name: Deploy to Google Play
        if: matrix.store == 'google-play'
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.dot.attendance
          releaseFiles: release-artifacts/build/app/outputs/bundle/release/app-release.aab
          track: production
          status: completed
          whatsNewDirectory: distribution/whatsnew
      
      - name: Deploy to App Store
        if: matrix.store == 'app-store'
        run: |
          echo "${{ secrets.APPSTORE_CONNECT_PRIVATE_KEY }}" | base64 -d > AuthKey.p8
          
          xcrun altool --upload-app \
            --type ios \
            --file release-artifacts/build/ios/ipa/dot_attendance.ipa \
            --apiKey ${{ secrets.APPSTORE_CONNECT_KEY_ID }} \
            --apiIssuer ${{ secrets.APPSTORE_CONNECT_ISSUER_ID }} \
            --verbose

  post-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, deploy-to-stores]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Update version in main branch
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Update pubspec.yaml
          cd services/attendance/mobile
          sed -i "s/version: .*/version: ${VERSION#v}+${{ github.run_number }}/" pubspec.yaml
          
          # Commit and push
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "chore: bump version to $VERSION" || exit 0
          git push
      
      - name: Create next version milestone
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const currentVersion = version.replace('v', '').split('.');
            
            // Calculate next minor version
            const nextVersion = `v${currentVersion[0]}.${parseInt(currentVersion[1]) + 1}.0`;
            
            try {
              await github.rest.issues.createMilestone({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: nextVersion,
                description: `Milestone for release ${nextVersion}`,
                state: 'open'
              });
              console.log(`Created milestone: ${nextVersion}`);
            } catch (error) {
              console.log(`Milestone ${nextVersion} may already exist:`, error.message);
            }
      
      - name: Notify team
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const isSuccess = '${{ needs.deploy-to-stores.result }}' === 'success';
            
            const body = `## 🚀 Release ${version} ${isSuccess ? 'Completed' : 'Failed'}
            
            **Version**: ${version}
            **Status**: ${isSuccess ? '✅ SUCCESS' : '❌ FAILED'}
            **Build Number**: ${{ github.run_number }}
            
            ### 📱 Distribution Status
            - **Google Play Store**: ${isSuccess ? '✅ Deployed' : '❌ Failed'}
            - **Apple App Store**: ${isSuccess ? '✅ Deployed' : '❌ Failed'}
            - **GitHub Release**: ✅ Created
            
            ### 🔗 Links
            - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${version})
            - [Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Google Play Console](https://play.google.com/console)
            - [App Store Connect](https://appstoreconnect.apple.com)
            
            ${!isSuccess ? '**Action Required**: Please investigate the release failure and take appropriate action.' : ''}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 Release ${version} ${isSuccess ? 'Completed' : 'Failed'}`,
              body: body,
              labels: ['release', isSuccess ? 'success' : 'failure']
            });