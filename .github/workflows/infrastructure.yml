name: Infrastructure as Code

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging

env:
  TERRAFORM_VERSION: '1.6.0'
  TF_VAR_project_name: 'dot-attendance'

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Run TFSec Security Scanner
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure
          soft_fail: true
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure
          soft_fail: true
          output_format: sarif
          output_file_path: checkov.sarif
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov.sarif

  terraform-plan:
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || github.event.inputs.action == 'plan'
    strategy:
      matrix:
        environment: [staging, production]
    defaults:
      run:
        working-directory: infrastructure
    environment: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"
      
      - name: Select Terraform Workspace
        run: |
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}
      
      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ matrix.environment }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -out=${{ matrix.environment }}.tfplan \
            -detailed-exitcode
      
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infrastructure/${{ matrix.environment }}.tfplan
          retention-days: 30
      
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              const plan = execSync('cd infrastructure && terraform show -no-color ${{ matrix.environment }}.tfplan', { encoding: 'utf-8' });
              
              const body = `## 🏗️ Terraform Plan - ${{ matrix.environment }}
              
              \`\`\`hcl
              ${plan.slice(0, 60000)}${plan.length > 60000 ? '\n... (truncated)' : ''}
              \`\`\`
              
              <details>
              <summary>📊 Plan Summary</summary>
              
              Environment: **${{ matrix.environment }}**
              Status: **${{ job.status }}**
              
              </details>`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Error posting plan comment:', error);
            }

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event.inputs.action == 'apply'
    strategy:
      matrix:
        environment: [staging, production]
    defaults:
      run:
        working-directory: infrastructure
    environment: 
      name: infrastructure-${{ matrix.environment }}
      url: ${{ steps.apply.outputs.app_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infrastructure/
      
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"
      
      - name: Select Terraform Workspace
        run: |
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}
      
      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_environment: ${{ matrix.environment }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
        run: |
          terraform apply -auto-approve ${{ matrix.environment }}.tfplan
          
          # Get outputs
          echo "app_url=$(terraform output -raw app_url)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT
          echo "cdn_url=$(terraform output -raw cdn_url)" >> $GITHUB_OUTPUT
      
      - name: Update DNS Records
        if: matrix.environment == 'production'
        run: |
          # Update DNS records with new infrastructure
          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{ secrets.ROUTE53_ZONE_ID }} \
            --change-batch file://dns-updates.json
      
      - name: Run Infrastructure Tests
        run: |
          # Test infrastructure is working
          echo "Testing infrastructure endpoints..."
          
          APP_URL="${{ steps.apply.outputs.app_url }}"
          API_URL="${{ steps.apply.outputs.api_url }}"
          
          # Health check API
          if curl -f "$API_URL/health" --max-time 30; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed"
            exit 1
          fi
          
          # Check CDN
          CDN_URL="${{ steps.apply.outputs.cdn_url }}"
          if curl -f "$CDN_URL" --max-time 30; then
            echo "✅ CDN check passed"
          else
            echo "⚠️ CDN check failed (non-critical)"
          fi
      
      - name: Generate Infrastructure Report
        run: |
          echo "## 🏗️ Infrastructure Deployment Report - ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployed Resources" >> $GITHUB_STEP_SUMMARY
          terraform show -json | jq -r '.values.root_module.resources[] | "- \(.type): \(.values.name // .values.id)"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: ${{ steps.apply.outputs.app_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API URL**: ${{ steps.apply.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CDN URL**: ${{ steps.apply.outputs.cdn_url }}" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    defaults:
      run:
        working-directory: infrastructure
    environment: 
      name: infrastructure-destroy
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key/${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}"
      
      - name: Select Terraform Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment }}
      
      - name: Terraform Destroy
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
        run: |
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
            -auto-approve

  notify:
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-plan, terraform-apply, terraform-destroy]
    if: always()
    steps:
      - name: Notify infrastructure status
        uses: actions/github-script@v6
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const action = '${{ github.event.inputs.action }}' || 'plan';
            
            const statusEmoji = success ? '✅' : '❌';
            const statusText = success ? 'SUCCESS' : 'FAILED';
            
            const body = `## 🏗️ Infrastructure ${action.toUpperCase()} ${statusText}
            
            **Action**: ${action}
            **Environment**: ${{ github.event.inputs.environment || 'all' }}
            **Status**: ${statusEmoji} ${statusText}
            
            ### 🔗 Useful Links
            - [Terraform Cloud](https://app.terraform.io)
            - [AWS Console](https://console.aws.amazon.com)
            - [GCP Console](https://console.cloud.google.com)
            - [Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Create issue for failed infrastructure changes
            if (!success) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Infrastructure ${action} Failed`,
                body: body + '\n\n**Action Required**: Please investigate the infrastructure failure.',
                labels: ['bug', 'infrastructure', action]
              });
            }