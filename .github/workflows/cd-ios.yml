name: CD - iOS

on:
  push:
    branches: [master]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

env:
  FLUTTER_VERSION: '3.16.0'
  XCODE_VERSION: '15.1'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Calculate version
        id: version
        run: |
          cd services/attendance/mobile
          current_version=$(grep "version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          current_build=$(grep "version:" pubspec.yaml | cut -d'+' -f2)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual version bump
            bump_type="${{ github.event.inputs.version_bump }}"
            new_version=$(echo $current_version | awk -F. -v bump=$bump_type '
              {
                if (bump == "major") { print ($1+1) ".0.0" }
                else if (bump == "minor") { print $1 "." ($2+1) ".0" }
                else { print $1 "." $2 "." ($3+1) }
              }
            ')
          else
            new_version=$current_version
          fi
          
          new_build=$((current_build + 1))
          
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "build_number=$new_build" >> $GITHUB_OUTPUT

  build-ios:
    runs-on: macos-13
    needs: prepare-release
    environment: ${{ needs.prepare-release.outputs.environment }}
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            ~/.cocoapods
            services/attendance/mobile/ios/Pods
          key: cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: cocoapods-${{ runner.os }}-
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Setup environment configuration
        run: |
          # Create environment-specific config files
          case "${{ needs.prepare-release.outputs.environment }}" in
            "staging")
              echo "const String baseUrl = 'https://staging-api.dotattendance.com';" > lib/core/config/env_config.dart
              echo "const String environment = 'staging';" >> lib/core/config/env_config.dart
              ;;
            "production")
              echo "const String baseUrl = 'https://api.dotattendance.com';" > lib/core/config/env_config.dart
              echo "const String environment = 'production';" >> lib/core/config/env_config.dart
              ;;
          esac
      
      - name: Setup Firebase configuration
        run: |
          # Setup Firebase config based on environment
          if [[ "${{ needs.prepare-release.outputs.environment }}" == "production" ]]; then
            echo "${{ secrets.FIREBASE_CONFIG_IOS_PROD }}" | base64 -d > ios/Runner/GoogleService-Info.plist
          else
            echo "${{ secrets.FIREBASE_CONFIG_IOS_STAGING }}" | base64 -d > ios/Runner/GoogleService-Info.plist
          fi
      
      - name: Setup Code Signing
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
      
      - name: Update version in iOS
        run: |
          # Update iOS version info
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ needs.prepare-release.outputs.version }}" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ needs.prepare-release.outputs.build_number }}" ios/Runner/Info.plist
      
      - name: Build iOS (Debug)
        if: needs.prepare-release.outputs.environment == 'staging'
        run: |
          flutter build ios \
            --debug \
            --no-codesign \
            --build-name=${{ needs.prepare-release.outputs.version }} \
            --build-number=${{ needs.prepare-release.outputs.build_number }} \
            --dart-define=ENVIRONMENT=staging
      
      - name: Build iOS (Release)
        if: needs.prepare-release.outputs.environment == 'production'
        run: |
          flutter build ios \
            --release \
            --build-name=${{ needs.prepare-release.outputs.version }} \
            --build-number=${{ needs.prepare-release.outputs.build_number }} \
            --dart-define=ENVIRONMENT=production
      
      - name: Build IPA
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          cd ios
          
          # Archive the app
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive
          
          # Export IPA
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${{ needs.prepare-release.outputs.environment == 'production' && 'app-store' || 'ad-hoc' }}</string>
            <key>teamID</key>
            <string>$TEAM_ID</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/Runner.ipa
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-${{ needs.prepare-release.outputs.environment }}-${{ needs.prepare-release.outputs.version }}
          path: |
            services/attendance/mobile/ios/build/Runner.ipa/*.ipa
            services/attendance/mobile/ios/build/Runner.xcarchive
          retention-days: 30
      
      - name: Clean up keychain and provisioning profile
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  deploy-ios-testflight:
    runs-on: macos-13
    needs: [prepare-release, build-ios]
    if: needs.prepare-release.outputs.environment == 'production'
    environment:
      name: ios-production
      url: https://apps.apple.com/app/id${{ secrets.APPLE_APP_ID }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ios-${{ needs.prepare-release.outputs.environment }}-${{ needs.prepare-release.outputs.version }}
      
      - name: Setup App Store Connect API
        run: |
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "${{ secrets.APPSTORE_CONNECT_PRIVATE_KEY }}" | base64 -d > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_CONNECT_KEY_ID }}.p8
      
      - name: Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          APPSTORE_CONNECT_KEY_ID: ${{ secrets.APPSTORE_CONNECT_KEY_ID }}
          APPSTORE_CONNECT_ISSUER_ID: ${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file ios/build/Runner.ipa/DotAttendance.ipa \
            --apiKey $APPSTORE_CONNECT_KEY_ID \
            --apiIssuer $APPSTORE_CONNECT_ISSUER_ID \
            --verbose
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ios/build/Runner.ipa/DotAttendance.ipa
          generate_release_notes: true
          prerelease: false

  deploy-ios-adhoc:
    runs-on: macos-13
    needs: [prepare-release, build-ios]
    if: needs.prepare-release.outputs.environment == 'staging'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ios-${{ needs.prepare-release.outputs.environment }}-${{ needs.prepare-release.outputs.version }}
      
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_IOS_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          groups: internal-testers
          file: ios/build/Runner.ipa/DotAttendance.ipa
          releaseNotes: |
            🚀 New staging build v${{ needs.prepare-release.outputs.version }}
            
            Build: ${{ needs.prepare-release.outputs.build_number }}
            Environment: Staging
            
            📋 What's included:
            - Latest features and bug fixes
            - Performance improvements
            - UI/UX enhancements

  notify:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-ios, deploy-ios-testflight, deploy-ios-adhoc]
    if: always()
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const environment = '${{ needs.prepare-release.outputs.environment }}';
            const version = '${{ needs.prepare-release.outputs.version }}';
            const success = '${{ job.status }}' === 'success';
            
            const statusEmoji = success ? '✅' : '❌';
            const statusText = success ? 'SUCCESS' : 'FAILED';
            
            const body = `## 🍎 iOS Deployment ${statusText}
            
            **Environment**: ${environment}
            **Version**: ${version}
            **Build Number**: ${{ needs.prepare-release.outputs.build_number }}
            
            ${statusEmoji} **Status**: ${statusText}
            
            ### 📱 Download Links
            ${environment === 'staging' 
              ? '- [Firebase App Distribution](https://firebase.google.com/docs/app-distribution)' 
              : '- [TestFlight](https://testflight.apple.com)'
            }
            
            ### 🔗 Useful Links
            - [Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [App Store Connect](https://appstoreconnect.apple.com)
            - [Firebase Console](https://console.firebase.google.com)`;
            
            // Create issue for failed deployments
            if (!success) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 iOS Deployment Failed - ${environment} v${version}`,
                body: body + '\n\n**Action Required**: Please investigate the deployment failure.',
                labels: ['bug', 'deployment', 'ios', environment]
              });
            }