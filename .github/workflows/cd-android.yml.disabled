name: CD - Android

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Calculate version
        id: version
        run: |
          cd services/attendance/mobile
          current_version=$(grep "version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          current_build=$(grep "version:" pubspec.yaml | cut -d'+' -f2)
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual version bump
            bump_type="${{ github.event.inputs.version_bump }}"
            new_version=$(echo $current_version | awk -F. -v bump=$bump_type '
              {
                if (bump == "major") { print ($1+1) ".0.0" }
                else if (bump == "minor") { print $1 "." ($2+1) ".0" }
                else { print $1 "." $2 "." ($3+1) }
              }
            ')
          else
            new_version=$current_version
          fi
          
          new_build=$((current_build + 1))
          
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "build_number=$new_build" >> $GITHUB_OUTPUT
          
          # Update pubspec.yaml
          sed -i "s/version: .*/version: $new_version+$new_build/" pubspec.yaml
          
          # Commit version bump if manual dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add pubspec.yaml
            git commit -m "chore: bump version to $new_version+$new_build" || exit 0
            git push
          fi

  build-android:
    runs-on: ubuntu-latest
    needs: prepare-release
    environment: ${{ needs.prepare-release.outputs.environment }}
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            services/attendance/mobile/android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs
      
      - name: Setup environment configuration
        run: |
          # Create environment-specific config files
          case "${{ needs.prepare-release.outputs.environment }}" in
            "staging")
              echo "const String baseUrl = 'https://staging-api.dotattendance.com';" > lib/core/config/env_config.dart
              echo "const String environment = 'staging';" >> lib/core/config/env_config.dart
              ;;
            "production")
              echo "const String baseUrl = 'https://api.dotattendance.com';" > lib/core/config/env_config.dart
              echo "const String environment = 'production';" >> lib/core/config/env_config.dart
              ;;
          esac
      
      - name: Setup Firebase configuration
        run: |
          # Setup Firebase config based on environment
          if [[ "${{ needs.prepare-release.outputs.environment }}" == "production" ]]; then
            echo "${{ secrets.FIREBASE_CONFIG_PROD }}" | base64 -d > android/app/google-services.json
          else
            echo "${{ secrets.FIREBASE_CONFIG_STAGING }}" | base64 -d > android/app/google-services.json
          fi
      
      - name: Setup signing configuration
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/keystore.jks
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=keystore.jks
          EOF
      
      - name: Build APK (Debug)
        if: needs.prepare-release.outputs.environment == 'staging'
        run: |
          flutter build apk \
            --debug \
            --build-name=${{ needs.prepare-release.outputs.version }} \
            --build-number=${{ needs.prepare-release.outputs.build_number }} \
            --dart-define=ENVIRONMENT=staging
      
      - name: Build AAB (Release)
        if: needs.prepare-release.outputs.environment == 'production'
        run: |
          flutter build appbundle \
            --release \
            --build-name=${{ needs.prepare-release.outputs.version }} \
            --build-number=${{ needs.prepare-release.outputs.build_number }} \
            --dart-define=ENVIRONMENT=production \
            --obfuscate \
            --split-debug-info=build/debug-info/
      
      - name: Upload debug symbols
        if: needs.prepare-release.outputs.environment == 'production'
        uses: actions/upload-artifact@v3
        with:
          name: android-debug-symbols
          path: services/attendance/mobile/build/debug-info/
      
      - name: Sign APK/AAB
        if: needs.prepare-release.outputs.environment == 'production'
        run: |
          # APK signing is handled by Flutter build process
          echo "✅ APK/AAB signed successfully"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-${{ needs.prepare-release.outputs.environment }}-${{ needs.prepare-release.outputs.version }}
          path: |
            services/attendance/mobile/build/app/outputs/flutter-apk/*.apk
            services/attendance/mobile/build/app/outputs/bundle/release/*.aab
          retention-days: 30

  deploy-android-internal:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-android]
    if: needs.prepare-release.outputs.environment == 'staging'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-${{ needs.prepare-release.outputs.environment }}-${{ needs.prepare-release.outputs.version }}
      
      - name: Setup Google Play API
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}" | base64 -d > google-play-key.json
      
      - name: Deploy to Internal Testing
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: google-play-key.json
          packageName: com.dot.attendance.staging
          releaseFiles: build/app/outputs/flutter-apk/app-debug.apk
          track: internal
          status: completed
          whatsNewDirectory: distribution/whatsnew
          mappingFile: build/app/outputs/mapping/release/mapping.txt

  deploy-android-production:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-android]
    if: needs.prepare-release.outputs.environment == 'production'
    environment:
      name: android-production
      url: https://play.google.com/store/apps/details?id=com.dot.attendance
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: android-${{ needs.prepare-release.outputs.environment }}-${{ needs.prepare-release.outputs.version }}
      
      - name: Setup Google Play API
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}" | base64 -d > google-play-key.json
      
      - name: Deploy to Production
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: google-play-key.json
          packageName: com.dot.attendance
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: beta # Start with beta track for production
          status: completed
          whatsNewDirectory: distribution/whatsnew
          mappingFile: build/app/outputs/mapping/release/mapping.txt
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/app/outputs/bundle/release/app-release.aab
          generate_release_notes: true
          prerelease: false

  notify:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-android, deploy-android-internal, deploy-android-production]
    if: always()
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const environment = '${{ needs.prepare-release.outputs.environment }}';
            const version = '${{ needs.prepare-release.outputs.version }}';
            const success = '${{ job.status }}' === 'success';
            
            const statusEmoji = success ? '✅' : '❌';
            const statusText = success ? 'SUCCESS' : 'FAILED';
            
            const body = `## 🤖 Android Deployment ${statusText}
            
            **Environment**: ${environment}
            **Version**: ${version}
            **Build Number**: ${{ needs.prepare-release.outputs.build_number }}
            
            ${statusEmoji} **Status**: ${statusText}
            
            ### 📱 Download Links
            ${environment === 'staging' 
              ? '- [Internal Testing](https://play.google.com/apps/internaltest)' 
              : '- [Google Play Store](https://play.google.com/store/apps/details?id=com.dot.attendance)'
            }
            
            ### 🔗 Useful Links
            - [Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Firebase Console](https://console.firebase.google.com)
            - [Play Console](https://play.google.com/console)`;
            
            // Create issue for failed deployments
            if (!success) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Android Deployment Failed - ${environment} v${version}`,
                body: body + '\n\n**Action Required**: Please investigate the deployment failure.',
                labels: ['bug', 'deployment', 'android', environment]
              });
            }