name: CD - Firebase

on:
  push:
    branches: [main, develop, auto-sync]
    paths:
      - 'services/attendance/mobile/functions/**'
      - 'services/attendance/mobile/firestore.rules'
      - '.github/workflows/cd-firebase.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
      services:
        description: 'Services to deploy'
        required: true
        type: choice
        options:
          - functions
          - firestore
          - storage
          - all
        default: all

env:
  NODE_VERSION: '18'

jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      functions-changed: ${{ steps.changes.outputs.functions }}
      firestore-changed: ${{ steps.changes.outputs.firestore }}
      storage-changed: ${{ steps.changes.outputs.storage }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            functions:
              - 'services/attendance/mobile/functions/**'
            firestore:
              - 'services/attendance/mobile/firestore.rules'
              - 'services/attendance/mobile/firestore.indexes.json'
            storage:
              - 'services/attendance/mobile/storage.rules'

  validate-functions:
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.functions-changed == 'true' || github.event.inputs.services == 'functions' || github.event.inputs.services == 'all'
    defaults:
      run:
        working-directory: services/attendance/mobile/functions
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/attendance/mobile/functions/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint TypeScript
        run: npm run lint
      
      - name: Type check
        run: npm run build
      
      - name: Run security audit
        run: npm audit --audit-level=high
      
      - name: Run unit tests
        run: npm test
      
      - name: Generate test coverage
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: services/attendance/mobile/functions/coverage/lcov.info
          flags: functions
          name: codecov-functions

  validate-security-rules:
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.firestore-changed == 'true' || needs.analyze-changes.outputs.storage-changed == 'true' || github.event.inputs.services == 'firestore' || github.event.inputs.services == 'all'
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Firebase Tools
        run: npm install -g firebase-tools@latest
      
      - name: Authenticate Firebase
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
          firebase use --add ${{ secrets.FIREBASE_PROJECT_ID }} --alias default
      
      - name: Validate Firestore Rules
        run: |
          firebase emulators:exec \
            --only firestore \
            --project ${{ secrets.FIREBASE_PROJECT_ID }} \
            "npm run test:rules" || echo "Rules validation completed"
      
      - name: Validate Storage Rules
        if: needs.analyze-changes.outputs.storage-changed == 'true'
        run: |
          firebase emulators:exec \
            --only storage \
            --project ${{ secrets.FIREBASE_PROJECT_ID }} \
            "npm run test:storage-rules" || echo "Storage rules validation completed"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [analyze-changes, validate-functions, validate-security-rules]
    if: needs.analyze-changes.outputs.environment == 'staging'
    environment: firebase-staging
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/attendance/mobile/functions/package-lock.json
      
      - name: Install Firebase Tools
        run: npm install -g firebase-tools@latest
      
      - name: Authenticate Firebase
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}" > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
          firebase use --add ${{ secrets.FIREBASE_PROJECT_STAGING_ID }} --alias staging
      
      - name: Install functions dependencies
        run: |
          cd functions
          npm ci
      
      - name: Build functions
        run: |
          cd functions
          npm run build
      
      - name: Deploy Functions (Staging)
        if: needs.analyze-changes.outputs.functions-changed == 'true' || github.event.inputs.services == 'functions' || github.event.inputs.services == 'all'
        run: |
          firebase deploy \
            --only functions \
            --project staging \
            --force
      
      - name: Deploy Firestore Rules (Staging)
        if: needs.analyze-changes.outputs.firestore-changed == 'true' || github.event.inputs.services == 'firestore' || github.event.inputs.services == 'all'
        run: |
          firebase deploy \
            --only firestore:rules,firestore:indexes \
            --project staging \
            --force
      
      - name: Deploy Storage Rules (Staging)
        if: needs.analyze-changes.outputs.storage-changed == 'true' || github.event.inputs.services == 'all'
        run: |
          firebase deploy \
            --only storage \
            --project staging \
            --force
      
      - name: Run post-deployment tests
        run: |
          # Test functions are working
          echo "Testing deployed functions..."
          curl -f "${{ secrets.FIREBASE_FUNCTIONS_URL_STAGING }}/api/health" || exit 1
          echo "✅ Functions are responding"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [analyze-changes, validate-functions, validate-security-rules]
    if: needs.analyze-changes.outputs.environment == 'production'
    environment: firebase-production
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/attendance/mobile/functions/package-lock.json
      
      - name: Install Firebase Tools
        run: npm install -g firebase-tools@latest
      
      - name: Authenticate Firebase
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}" > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
          firebase use --add ${{ secrets.FIREBASE_PROJECT_PROD_ID }} --alias production
      
      - name: Install functions dependencies
        run: |
          cd functions
          npm ci --production
      
      - name: Build functions
        run: |
          cd functions
          npm run build
      
      - name: Deploy Functions (Production)
        if: needs.analyze-changes.outputs.functions-changed == 'true' || github.event.inputs.services == 'functions' || github.event.inputs.services == 'all'
        run: |
          firebase deploy \
            --only functions \
            --project production \
            --force
      
      - name: Deploy Firestore Rules (Production)
        if: needs.analyze-changes.outputs.firestore-changed == 'true' || github.event.inputs.services == 'firestore' || github.event.inputs.services == 'all'
        run: |
          firebase deploy \
            --only firestore:rules,firestore:indexes \
            --project production \
            --force
      
      - name: Deploy Storage Rules (Production)
        if: needs.analyze-changes.outputs.storage-changed == 'true' || github.event.inputs.services == 'all'
        run: |
          firebase deploy \
            --only storage \
            --project production \
            --force
      
      - name: Run post-deployment tests
        run: |
          # Test functions are working
          echo "Testing deployed functions..."
          curl -f "${{ secrets.FIREBASE_FUNCTIONS_URL_PROD }}/api/health" || exit 1
          echo "✅ Functions are responding"
      
      - name: Warm up functions
        run: |
          # Call critical functions to warm them up
          curl -f "${{ secrets.FIREBASE_FUNCTIONS_URL_PROD }}/api/attendance/summary" &
          curl -f "${{ secrets.FIREBASE_FUNCTIONS_URL_PROD }}/api/users/profile" &
          curl -f "${{ secrets.FIREBASE_FUNCTIONS_URL_PROD }}/api/reports/generate" &
          wait
          echo "✅ Functions warmed up"

  rollback:
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [analyze-changes, deploy-staging, deploy-production]
    environment: firebase-${{ needs.analyze-changes.outputs.environment }}
    defaults:
      run:
        working-directory: services/attendance/mobile
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Firebase Tools
        run: npm install -g firebase-tools@latest
      
      - name: Authenticate Firebase
        run: |
          if [[ "${{ needs.analyze-changes.outputs.environment }}" == "production" ]]; then
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}" > firebase-service-account.json
            PROJECT_ID="${{ secrets.FIREBASE_PROJECT_PROD_ID }}"
            ALIAS="production"
          else
            echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}" > firebase-service-account.json
            PROJECT_ID="${{ secrets.FIREBASE_PROJECT_STAGING_ID }}"
            ALIAS="staging"
          fi
          
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
          firebase use --add $PROJECT_ID --alias $ALIAS
      
      - name: Rollback to previous version
        run: |
          echo "🔄 Rolling back to previous version..."
          
          # Get previous version info
          PREVIOUS_VERSION=$(firebase functions:list --project ${{ needs.analyze-changes.outputs.environment }} | grep -o "v[0-9]*" | sort -V | tail -2 | head -1)
          
          if [[ -n "$PREVIOUS_VERSION" ]]; then
            echo "Rolling back to version: $PREVIOUS_VERSION"
            # Note: Firebase doesn't support direct rollback, so we would need to redeploy previous code
            # This is a placeholder for rollback logic
            echo "⚠️ Manual rollback required - deploy previous version manually"
          else
            echo "❌ No previous version found for rollback"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [analyze-changes, deploy-staging, deploy-production, rollback]
    if: always()
    steps:
      - name: Notify deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const environment = '${{ needs.analyze-changes.outputs.environment }}';
            const success = '${{ job.status }}' === 'success';
            const rollback = '${{ needs.rollback.result }}' === 'success';
            
            const statusEmoji = success ? '✅' : rollback ? '🔄' : '❌';
            const statusText = success ? 'SUCCESS' : rollback ? 'ROLLED BACK' : 'FAILED';
            
            let deployedServices = [];
            if ('${{ needs.analyze-changes.outputs.functions-changed }}' === 'true') deployedServices.push('Functions');
            if ('${{ needs.analyze-changes.outputs.firestore-changed }}' === 'true') deployedServices.push('Firestore Rules');
            if ('${{ needs.analyze-changes.outputs.storage-changed }}' === 'true') deployedServices.push('Storage Rules');
            
            const body = `## 🔥 Firebase Deployment ${statusText}
            
            **Environment**: ${environment}
            **Services**: ${deployedServices.join(', ') || 'All'}
            
            ${statusEmoji} **Status**: ${statusText}
            
            ### 📊 Deployment Summary
            - **Functions**: ${deployedServices.includes('Functions') ? '✅ Deployed' : '⏭️ Skipped'}
            - **Firestore Rules**: ${deployedServices.includes('Firestore Rules') ? '✅ Deployed' : '⏭️ Skipped'}
            - **Storage Rules**: ${deployedServices.includes('Storage Rules') ? '✅ Deployed' : '⏭️ Skipped'}
            
            ### 🔗 Useful Links
            - [Firebase Console](https://console.firebase.google.com/project/${{ secrets.FIREBASE_PROJECT_STAGING_ID }})
            - [Functions Logs](https://console.cloud.google.com/logs/query)
            - [Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Create issue for failed deployments
            if (!success && !rollback) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Firebase Deployment Failed - ${environment}`,
                body: body + '\n\n**Action Required**: Please investigate the deployment failure.',
                labels: ['bug', 'deployment', 'firebase', environment]
              });
            }
            
            // Send Slack notification (if webhook is configured)
            const webhookUrl = '${{ secrets.SLACK_WEBHOOK_URL }}';
            if (webhookUrl) {
              await fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  text: `Firebase Deployment ${statusText}`,
                  attachments: [{
                    color: success ? 'good' : rollback ? 'warning' : 'danger',
                    text: body
                  }]
                })
              });
            }