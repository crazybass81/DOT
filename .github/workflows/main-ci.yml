name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 변경 감지
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      mobile: ${{ steps.changes.outputs.mobile }}
      marketing: ${{ steps.changes.outputs.marketing }}
      scheduler: ${{ steps.changes.outputs.scheduler }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            mobile:
              - 'services/attendance/mobile/**'
            marketing:
              - 'services/marketing/**'
            scheduler:
              - 'services/scheduler/**'
            infrastructure:
              - 'infrastructure/**'
            docker:
              - 'docker/**'
              - '**/Dockerfile'
              - '**/docker-compose*.yml'

  # 모바일 앱 CI
  mobile-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.mobile == 'true'
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # 마케팅 서비스 CI
  marketing-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.marketing == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/marketing
    steps:
      - uses: actions/checkout@v4
      
      - name: Check marketing service type
        id: check-type
        run: |
          if [ -f "package.json" ]; then
            echo "type=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "type=python" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "type=go" >> $GITHUB_OUTPUT
          fi
      
      - name: Run Node.js CI
        if: steps.check-type.outputs.type == 'node'
        run: |
          npm ci
          npm run lint || true
          npm test || true
      
      - name: Run Python CI
        if: steps.check-type.outputs.type == 'python'
        run: |
          pip install -r requirements.txt
          python -m pytest || true
      
      - name: Run Go CI
        if: steps.check-type.outputs.type == 'go'
        run: |
          go mod download
          go test ./... || true

  # 스케줄러 서비스 CI
  scheduler-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.scheduler == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/scheduler
    steps:
      - uses: actions/checkout@v4
      
      - name: Check scheduler service
        run: |
          echo "Scheduler service check"
          ls -la
          # 실제 서비스 타입에 따라 테스트 추가

  # 인프라 검증
  infrastructure-check:
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure == 'true'
    uses: ./.github/workflows/infrastructure.yml
    secrets: inherit

  # Docker 이미지 빌드 테스트
  docker-build:
    needs: detect-changes
    if: needs.detect-changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [mobile, marketing, scheduler]
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Dockerfile exists
        id: check-docker
        run: |
          if [ -f "services/${{ matrix.service }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image
        if: steps.check-docker.outputs.exists == 'true'
        run: |
          docker build -t dot-${{ matrix.service }}:test services/${{ matrix.service }}/

  # 통합 테스트
  integration-test:
    needs: [mobile-ci, marketing-ci, scheduler-ci]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Docker Compose로 전체 스택 테스트
          if [ -f "docker-compose.test.yml" ]; then
            docker-compose -f docker-compose.test.yml up --abort-on-container-exit
          fi

  # 품질 게이트
  quality-gate:
    needs: [mobile-ci, marketing-ci, scheduler-ci, infrastructure-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check all services
        run: |
          echo "## 🔍 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 각 서비스 상태 체크
          if [[ "${{ needs.mobile-ci.result }}" == "success" ]] || [[ "${{ needs.mobile-ci.result }}" == "skipped" ]]; then
            echo "✅ Mobile App: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Mobile App: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.marketing-ci.result }}" == "success" ]] || [[ "${{ needs.marketing-ci.result }}" == "skipped" ]]; then
            echo "✅ Marketing Service: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Marketing Service: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.scheduler-ci.result }}" == "success" ]] || [[ "${{ needs.scheduler-ci.result }}" == "skipped" ]]; then
            echo "✅ Scheduler Service: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Scheduler Service: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.infrastructure-check.result }}" == "success" ]] || [[ "${{ needs.infrastructure-check.result }}" == "skipped" ]]; then
            echo "✅ Infrastructure: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Infrastructure: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: All checks completed" >> $GITHUB_STEP_SUMMARY