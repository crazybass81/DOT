const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://mljyiuzetchtjudbcfvd.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1sanlpdXpldGNodGp1ZGJjZnZkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNTEwMzAzNSwiZXhwIjoyMDUwNjc5MDM1fQ.3l7OW2fgPxUKJLx4xPFLWo89BFmE7dhCXnbmCfnp0IY'

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function checkAuth() {
  console.log('üîç Auth ÏãúÏä§ÌÖú Ï≤¥ÌÅ¨ ÏãúÏûë...\n')
  
  try {
    // 1. Auth Users ÌÖåÏù¥Î∏î ÌôïÏù∏
    const { data: { users }, error: usersError } = await supabase.auth.admin.listUsers()
    
    if (usersError) {
      console.error('‚ùå Auth users Ï°∞Ìöå Ïã§Ìå®:', usersError)
      return
    }
    
    console.log(`üìä Îì±Î°ùÎêú ÏÇ¨Ïö©Ïûê Ïàò: ${users?.length || 0}Î™Ö`)
    
    if (users && users.length > 0) {
      console.log('\nÏµúÍ∑º Îì±Î°ùÎêú ÏÇ¨Ïö©Ïûê:')
      users.slice(0, 3).forEach(user => {
        console.log(`- Email: ${user.email}`)
        console.log(`  ID: ${user.id}`)
        console.log(`  ÏÉùÏÑ±Ïùº: ${user.created_at}`)
        console.log(`  Ïù¥Î©îÏùº ÌôïÏù∏: ${user.email_confirmed_at ? '‚úÖ' : '‚ùå (ÎØ∏ÌôïÏù∏)'}`)
        console.log(`  Î©îÌÉÄÎç∞Ïù¥ÌÑ∞:`, user.user_metadata)
        console.log('')
      })
    }
    
    // 2. Ïù¥Î©îÏùº ÌôïÏù∏ ÏÑ§Ï†ï Ï≤¥ÌÅ¨
    console.log('\nüìß Ïù¥Î©îÏùº ÌôïÏù∏ ÏÑ§Ï†ï:')
    console.log('Supabase ÎåÄÏãúÎ≥¥Îìú > Authentication > Settings > Email Auth')
    console.log('- "Confirm email" ÏòµÏÖòÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏúºÎ©¥ Ïù¥Î©îÏùº ÌôïÏù∏ ÌïÑÏöî')
    console.log('- ÎπÑÌôúÏÑ±ÌôîÌïòÎ©¥ Ï¶âÏãú Î°úÍ∑∏Ïù∏ Í∞ÄÎä•')
    
    // 3. ÌÖåÏä§Ìä∏ Î°úÍ∑∏Ïù∏
    const testEmail = users?.[0]?.email
    if (testEmail) {
      console.log(`\nüîë ÌÖåÏä§Ìä∏ Î°úÍ∑∏Ïù∏: ${testEmail}`)
      const { data, error } = await supabase.auth.signInWithPassword({
        email: testEmail,
        password: 'wrong_password_test'
      })
      
      if (error) {
        if (error.message.includes('Invalid login credentials')) {
          console.log('‚úÖ ÏÇ¨Ïö©ÏûêÎäî Ï°¥Ïû¨Ìï® (ÎπÑÎ∞ÄÎ≤àÌò∏Îßå ÌãÄÎ¶º)')
        } else if (error.message.includes('Email not confirmed')) {
          console.log('‚ö†Ô∏è Ïù¥Î©îÏùº ÌôïÏù∏ ÌïÑÏöî!')
        } else {
          console.log('‚ùå Î°úÍ∑∏Ïù∏ ÏóêÎü¨:', error.message)
        }
      }
    }
    
    // 4. Employees ÌÖåÏù¥Î∏î ÌôïÏù∏
    console.log('\nüìã Employees ÌÖåÏù¥Î∏î ÌôïÏù∏:')
    const { data: employees, error: empError } = await supabase
      .from('employees')
      .select('*')
      .limit(3)
    
    if (empError) {
      console.log('‚ùå Employees ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïã§Ìå®:', empError.message)
    } else {
      console.log(`Employees Î†àÏΩîÎìú Ïàò: ${employees?.length || 0}Í∞ú`)
      employees?.forEach(emp => {
        console.log(`- ${emp.name} (${emp.email})`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå Ï≤¥ÌÅ¨ Ï§ë Ïò§Î•ò:', error)
  }
}

checkAuth()