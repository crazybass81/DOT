/**
 * GitHub-style Admin Dashboard Test Suite
 * Comprehensive testing for real-time monitoring and management features
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { render, screen, fireEvent, waitFor, within } from '@testing-library/react';
import { createClient } from '@supabase/supabase-js';
import AdminDashboard from '../app/admin/dashboard/page';
import RealtimeAttendance from '../components/dashboard/RealtimeAttendance';
import AttendanceStats from '../components/dashboard/AttendanceStats';
import ActivityFeed from '../components/dashboard/ActivityFeed';
import QuickActionPanel from '../components/dashboard/QuickActionPanel';
import { NotificationProvider } from '../components/notifications/NotificationSystem';

// Mock Supabase
vi.mock('@/src/lib/supabase/client', () => ({
  supabase: {
    from: vi.fn(() => ({\n      select: vi.fn().mockReturnThis(),\n      eq: vi.fn().mockReturnThis(),\n      gte: vi.fn().mockReturnThis(),\n      order: vi.fn().mockReturnThis(),\n      limit: vi.fn().mockReturnThis(),\n      single: vi.fn().mockReturnThis(),\n      then: vi.fn()\n    })),\n    channel: vi.fn(() => ({\n      on: vi.fn().mockReturnThis(),\n      subscribe: vi.fn(),\n      unsubscribe: vi.fn()\n    })),\n    removeChannel: vi.fn()\n  }\n}));\n\n// Mock services\nvi.mock('@/src/services/multiRoleAuthService', () => ({\n  multiRoleAuthService: {\n    signOut: vi.fn()\n  }\n}));\n\nvi.mock('@/src/services/userService', () => ({\n  userService: {\n    getCurrentUser: vi.fn(() => ({\n      id: 'test-user',\n      name: '테스트 관리자',\n      email: 'admin@test.com',\n      organizationId: 'test-org'\n    })),\n    isAdmin: vi.fn(() => true)\n  }\n}));\n\n// Mock Next.js router\nconst mockPush = vi.fn();\nvi.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: vi.fn(),\n    prefetch: vi.fn()\n  })\n}));\n\n// Test data\nconst mockEmployees = [\n  {\n    id: 'emp-1',\n    name: '김철수',\n    email: 'kim@test.com',\n    employee_code: 'EMP001',\n    role: 'EMPLOYEE',\n    approval_status: 'APPROVED',\n    is_active: true,\n    organization_id: 'test-org',\n    departments: { name: '개발팀' },\n    positions: { name: '시니어 개발자' }\n  },\n  {\n    id: 'emp-2',\n    name: '이영희',\n    email: 'lee@test.com',\n    employee_code: 'EMP002',\n    role: 'MANAGER',\n    approval_status: 'APPROVED',\n    is_active: true,\n    organization_id: 'test-org',\n    departments: { name: '마케팅팀' },\n    positions: { name: '팀 리더' }\n  }\n];\n\nconst mockAttendanceRecords = [\n  {\n    id: 'att-1',\n    employee_id: 'emp-1',\n    date: new Date().toISOString().split('T')[0],\n    check_in_time: '09:00:00',\n    check_out_time: null,\n    is_late: false,\n    work_hours: null,\n    overtime_hours: 0,\n    check_in_method: 'GPS',\n    status: 'CHECKED_IN',\n    organization_id: 'test-org',\n    created_at: new Date().toISOString(),\n    employees: { name: '김철수', employee_code: 'EMP001' }\n  },\n  {\n    id: 'att-2',\n    employee_id: 'emp-2',\n    date: new Date().toISOString().split('T')[0],\n    check_in_time: '09:15:00',\n    check_out_time: null,\n    is_late: true,\n    work_hours: null,\n    overtime_hours: 0,\n    check_in_method: 'QR',\n    status: 'CHECKED_IN',\n    organization_id: 'test-org',\n    created_at: new Date().toISOString(),\n    employees: { name: '이영희', employee_code: 'EMP002' }\n  }\n];\n\n// Helper function to render with providers\nconst renderWithProviders = (component: React.ReactElement) => {\n  return render(\n    <NotificationProvider>\n      {component}\n    </NotificationProvider>\n  );\n};\n\ndescribe('GitHub-style Admin Dashboard', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Setup default Supabase mocks\n    const mockSupabase = require('@/src/lib/supabase/client').supabase;\n    mockSupabase.from.mockImplementation((table: string) => {\n      const query = {\n        select: vi.fn().mockReturnThis(),\n        eq: vi.fn().mockReturnThis(),\n        gte: vi.fn().mockReturnThis(),\n        order: vi.fn().mockReturnThis(),\n        limit: vi.fn().mockReturnThis(),\n        single: vi.fn().mockReturnThis()\n      };\n      \n      // Mock different responses based on table\n      if (table === 'employees') {\n        query.select.mockResolvedValue({ data: mockEmployees, error: null });\n      } else if (table === 'attendance_records') {\n        query.select.mockResolvedValue({ data: mockAttendanceRecords, error: null });\n      }\n      \n      return query;\n    });\n  });\n\n  describe('Dashboard Header', () => {\n    it('should render GitHub-style header with DOT branding', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('DOT Admin')).toBeInTheDocument();\n        expect(screen.getByText('테스트 관리자')).toBeInTheDocument();\n      });\n    });\n\n    it('should display real-time clock with live updates', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const clockElement = screen.getByText(/\\d{1,2}:\\d{2}:\\d{2}/);\n        expect(clockElement).toBeInTheDocument();\n        expect(clockElement).toHaveClass('font-mono');\n      });\n    });\n\n    it('should have search functionality in header', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const searchInput = screen.getByPlaceholderText('직원 검색...');\n        expect(searchInput).toBeInTheDocument();\n        expect(searchInput).toHaveClass('focus:ring-2', 'focus:ring-blue-500');\n      });\n    });\n\n    it('should handle logout properly', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const logoutButton = screen.getByText('로그아웃');\n        fireEvent.click(logoutButton);\n        \n        expect(require('@/src/services/multiRoleAuthService').multiRoleAuthService.signOut).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Navigation Tabs', () => {\n    it('should render GitHub-style navigation with icons', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        expect(screen.getByText('📊')).toBeInTheDocument(); // Dashboard icon\n        expect(screen.getByText('👥')).toBeInTheDocument(); // Employees icon\n        expect(screen.getByText('🕐')).toBeInTheDocument(); // Attendance icon\n        expect(screen.getByText('📈')).toBeInTheDocument(); // Reports icon\n        expect(screen.getByText('⚙️')).toBeInTheDocument(); // Settings icon\n      });\n    });\n\n    it('should highlight active dashboard tab', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const dashboardTab = screen.getByText('대시보드').closest('a');\n        expect(dashboardTab).toHaveClass('border-blue-500', 'text-blue-600');\n      });\n    });\n  });\n\n  describe('Real-time Employee Monitoring', () => {\n    const organizationId = 'test-org';\n    const onNotification = vi.fn();\n\n    it('should display employee list with real-time status', async () => {\n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('김철수')).toBeInTheDocument();\n        expect(screen.getByText('이영희')).toBeInTheDocument();\n      });\n    });\n\n    it('should show online status indicators', async () => {\n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should show green indicator for checked-in employees\n        const statusIndicators = screen.getAllByText('🟢');\n        expect(statusIndicators.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should display check-in times and working hours', async () => {\n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('출근: 09:00')).toBeInTheDocument();\n        expect(screen.getByText('출근: 09:15')).toBeInTheDocument();\n      });\n    });\n\n    it('should show quick action buttons for each employee', async () => {\n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        const editButtons = screen.getAllByTitle('기록 수정');\n        const checkoutButtons = screen.getAllByTitle('수동 퇴근');\n        \n        expect(editButtons.length).toBeGreaterThan(0);\n        expect(checkoutButtons.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should filter employees by status', async () => {\n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        const onlineFilter = screen.getByText('출근 중');\n        fireEvent.click(onlineFilter);\n        \n        // Should still show checked-in employees\n        expect(screen.getByText('김철수')).toBeInTheDocument();\n        expect(screen.getByText('이영희')).toBeInTheDocument();\n      });\n    });\n\n    it('should search employees by name', async () => {\n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        const searchInput = screen.getByPlaceholderText('직원 이름 또는 이메일 검색...');\n        fireEvent.change(searchInput, { target: { value: '김철수' } });\n        \n        expect(screen.getByText('김철수')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Statistics Dashboard', () => {\n    const organizationId = 'test-org';\n    const onNotification = vi.fn();\n\n    it('should display key attendance statistics', async () => {\n      renderWithProviders(\n        <AttendanceStats \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('전체 직원')).toBeInTheDocument();\n        expect(screen.getByText('오늘 출근')).toBeInTheDocument();\n        expect(screen.getByText('출근율')).toBeInTheDocument();\n        expect(screen.getByText('지각')).toBeInTheDocument();\n      });\n    });\n\n    it('should show period selector (today/week/month)', async () => {\n      renderWithProviders(\n        <AttendanceStats \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('오늘')).toBeInTheDocument();\n        expect(screen.getByText('이번 주')).toBeInTheDocument();\n        expect(screen.getByText('이번 달')).toBeInTheDocument();\n      });\n    });\n\n    it('should calculate and display attendance rate', async () => {\n      renderWithProviders(\n        <AttendanceStats \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should show percentage with % symbol\n        const attendanceRate = screen.getByText(/\\d+\\.\\d%/);\n        expect(attendanceRate).toBeInTheDocument();\n      });\n    });\n\n    it('should show actionable insights for pending approvals', async () => {\n      renderWithProviders(\n        <AttendanceStats \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should have approval button if there are pending approvals\n        const approvalButton = screen.queryByText('승인 처리하기');\n        // Button might not exist if no pending approvals\n        if (approvalButton) {\n          expect(approvalButton).toBeInTheDocument();\n        }\n      });\n    });\n  });\n\n  describe('Activity Feed', () => {\n    const organizationId = 'test-org';\n    const onNotification = vi.fn();\n\n    it('should display recent attendance activities', async () => {\n      renderWithProviders(\n        <ActivityFeed \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('실시간 활동')).toBeInTheDocument();\n        expect(screen.getByText('실시간')).toBeInTheDocument();\n      });\n    });\n\n    it('should filter activities by type', async () => {\n      renderWithProviders(\n        <ActivityFeed \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('전체')).toBeInTheDocument();\n        expect(screen.getByText('출근')).toBeInTheDocument();\n        expect(screen.getByText('퇴근')).toBeInTheDocument();\n        expect(screen.getByText('승인')).toBeInTheDocument();\n      });\n    });\n\n    it('should show activity timestamps', async () => {\n      renderWithProviders(\n        <ActivityFeed \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should show relative time like \"방금 전\", \"5분 전\", etc.\n        const timeElement = screen.queryByText(/전$|분 전|시간 전/);\n        if (timeElement) {\n          expect(timeElement).toBeInTheDocument();\n        }\n      });\n    });\n  });\n\n  describe('Quick Action Panel', () => {\n    const organizationId = 'test-org';\n    const onNotification = vi.fn();\n\n    it('should display all quick action buttons', async () => {\n      renderWithProviders(\n        <QuickActionPanel \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        expect(screen.getByText('승인 대기')).toBeInTheDocument();\n        expect(screen.getByText('수동 출퇴근')).toBeInTheDocument();\n        expect(screen.getByText('QR 코드')).toBeInTheDocument();\n        expect(screen.getByText('지각 관리')).toBeInTheDocument();\n      });\n    });\n\n    it('should show count badges for urgent items', async () => {\n      renderWithProviders(\n        <QuickActionPanel \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should show count badges where applicable\n        const countBadges = screen.queryAllByText(/\\d+/);\n        expect(countBadges.length).toBeGreaterThanOrEqual(0);\n      });\n    });\n\n    it('should highlight urgent actions', async () => {\n      renderWithProviders(\n        <QuickActionPanel \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should show urgent indicator for critical items\n        const urgentIndicator = screen.queryByText('긴급');\n        if (urgentIndicator) {\n          expect(urgentIndicator).toHaveClass('animate-pulse');\n        }\n      });\n    });\n\n    it('should handle navigation to action pages', async () => {\n      // Mock window.location.href\n      const originalLocation = window.location;\n      delete (window as any).location;\n      window.location = { ...originalLocation, href: '' };\n      \n      renderWithProviders(\n        <QuickActionPanel \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        const approvalButton = screen.getByText('승인 대기');\n        fireEvent.click(approvalButton);\n        \n        expect(window.location.href).toBe('/admin/approvals');\n      });\n      \n      // Restore original location\n      window.location = originalLocation;\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    it('should setup Supabase realtime subscriptions', async () => {\n      const mockSupabase = require('@/src/lib/supabase/client').supabase;\n      const mockChannel = {\n        on: vi.fn().mockReturnThis(),\n        subscribe: vi.fn()\n      };\n      mockSupabase.channel.mockReturnValue(mockChannel);\n      \n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        expect(mockSupabase.channel).toHaveBeenCalled();\n        expect(mockChannel.on).toHaveBeenCalled();\n        expect(mockChannel.subscribe).toHaveBeenCalled();\n      });\n    });\n\n    it('should handle real-time attendance updates', async () => {\n      const organizationId = 'test-org';\n      const onNotification = vi.fn();\n      \n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Component should be rendered\n        expect(screen.getByText('실시간 직원 모니터링')).toBeInTheDocument();\n      });\n    });\n\n    it('should show live status updates', async () => {\n      const organizationId = 'test-org';\n      const onNotification = vi.fn();\n      \n      renderWithProviders(\n        <AttendanceStats \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Should show real-time indicator\n        const realtimeIndicator = screen.queryByText('실시간 업데이트');\n        if (realtimeIndicator) {\n          expect(realtimeIndicator).toBeInTheDocument();\n        }\n      });\n    });\n  });\n\n  describe('Mobile Responsiveness', () => {\n    beforeEach(() => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375\n      });\n    });\n\n    it('should hide search bar on mobile', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const searchInput = screen.queryByPlaceholderText('직원 검색...');\n        if (searchInput) {\n          expect(searchInput.closest('div')).toHaveClass('hidden', 'md:block');\n        }\n      });\n    });\n\n    it('should stack quick actions vertically on mobile', async () => {\n      const organizationId = 'test-org';\n      const onNotification = vi.fn();\n      \n      renderWithProviders(\n        <QuickActionPanel \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        const gridContainer = screen.getByText('승인 대기').closest('.grid');\n        if (gridContainer) {\n          expect(gridContainer).toHaveClass('grid-cols-1');\n        }\n      });\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const logoutButton = screen.getByText('로그아웃');\n        expect(logoutButton).toBeInTheDocument();\n        \n        // Check for screen reader friendly elements\n        const srOnlyElements = document.querySelectorAll('.sr-only');\n        expect(srOnlyElements.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should support keyboard navigation', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const focusableElements = screen.getAllByRole('button');\n        expect(focusableElements.length).toBeGreaterThan(0);\n        \n        // All buttons should be focusable\n        focusableElements.forEach(element => {\n          expect(element).not.toHaveAttribute('tabindex', '-1');\n        });\n      });\n    });\n\n    it('should have proper color contrast for status indicators', async () => {\n      const organizationId = 'test-org';\n      const onNotification = vi.fn();\n      \n      renderWithProviders(\n        <RealtimeAttendance \n          organizationId={organizationId}\n          onNotification={onNotification}\n        />\n      );\n      \n      await waitFor(() => {\n        // Status indicators should have proper contrast classes\n        const statusElements = document.querySelectorAll('[class*=\"text-green\"], [class*=\"text-red\"], [class*=\"text-yellow\"]');\n        expect(statusElements.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    it('should render quickly with loading states', async () => {\n      const start = performance.now();\n      \n      renderWithProviders(<AdminDashboard />);\n      \n      const end = performance.now();\n      const renderTime = end - start;\n      \n      // Should render within reasonable time (100ms)\n      expect(renderTime).toBeLessThan(100);\n    });\n\n    it('should show loading skeletons while data loads', async () => {\n      renderWithProviders(<AdminDashboard />);\n      \n      // Should show loading indicator initially\n      const loadingElement = screen.queryByText('로딩 중...');\n      if (loadingElement) {\n        expect(loadingElement).toBeInTheDocument();\n      }\n    });\n\n    it('should handle large datasets efficiently', async () => {\n      // Create mock data with many employees\n      const largeEmployeeList = Array.from({ length: 100 }, (_, i) => ({\n        ...mockEmployees[0],\n        id: `emp-${i}`,\n        name: `직원 ${i}`,\n        email: `employee${i}@test.com`\n      }));\n      \n      const mockSupabase = require('@/src/lib/supabase/client').supabase;\n      mockSupabase.from.mockImplementation(() => ({\n        select: vi.fn().mockResolvedValue({ data: largeEmployeeList, error: null }),\n        eq: vi.fn().mockReturnThis(),\n        gte: vi.fn().mockReturnThis(),\n        order: vi.fn().mockReturnThis(),\n        limit: vi.fn().mockReturnThis()\n      }));\n      \n      const start = performance.now();\n      \n      renderWithProviders(<AdminDashboard />);\n      \n      await waitFor(() => {\n        const end = performance.now();\n        const renderTime = end - start;\n        \n        // Should handle large datasets efficiently\n        expect(renderTime).toBeLessThan(500);\n      });\n    });\n  });\n});\n\n// Additional integration tests\ndescribe('Dashboard Integration', () => {\n  it('should coordinate between all components', async () => {\n    renderWithProviders(<AdminDashboard />);\n    \n    await waitFor(() => {\n      // All main components should be present\n      expect(screen.getByText('DOT Admin')).toBeInTheDocument();\n      expect(screen.getByText('빠른 액션')).toBeInTheDocument();\n      expect(screen.getByText('출근 통계')).toBeInTheDocument();\n      expect(screen.getByText('실시간 직원 모니터링')).toBeInTheDocument();\n      expect(screen.getByText('실시간 활동')).toBeInTheDocument();\n    });\n  });\n\n  it('should propagate notifications between components', async () => {\n    renderWithProviders(<AdminDashboard />);\n    \n    await waitFor(() => {\n      // Notification system should be available\n      const notificationContainer = document.querySelector('[class*=\"fixed\"][class*=\"z-\"]');\n      if (notificationContainer) {\n        expect(notificationContainer).toBeInTheDocument();\n      }\n    });\n  });\n\n  it('should maintain state consistency across components', async () => {\n    renderWithProviders(<AdminDashboard />);\n    \n    await waitFor(() => {\n      // All components should use the same organization ID\n      expect(screen.getByText('DOT Admin')).toBeInTheDocument();\n    });\n  });\n});