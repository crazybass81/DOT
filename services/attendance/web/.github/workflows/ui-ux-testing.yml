name: UI/UX 통합 테스트 파이프라인

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/attendance/web/**'
      - '.github/workflows/ui-ux-testing.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/attendance/web/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: services/attendance/web

jobs:
  # 단위 테스트 및 통합 테스트
  unit-integration-tests:
    name: 단위 및 통합 테스트
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_attendance
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: services/attendance/web/package-lock.json

    - name: 의존성 설치
      run: npm ci

    - name: TypeScript 타입 체크
      run: npx tsc --noEmit

    - name: ESLint 검사
      run: npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-results.json || true

    - name: 단위 테스트 실행
      run: npm run test:unit -- --coverage --coverageReporters=json --coverageReporters=lcov
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_attendance
        REDIS_URL: redis://localhost:6379

    - name: 통합 테스트 실행
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_attendance
        REDIS_URL: redis://localhost:6379
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

    - name: UI/UX 통합 테스트 실행
      run: npm test -- --testPathPattern="ui-ux-integration" --coverage=false
      env:
        NODE_ENV: test

    - name: 커버리지 리포트 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./services/attendance/web/coverage/lcov.info
        flags: unittests
        name: attendance-web-coverage

    - name: 커버리지 코멘트 생성
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./services/attendance/web/coverage/lcov.info
        delete-old-comments: true

    - name: 테스트 결과 아티팩트 저장
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          services/attendance/web/coverage/
          services/attendance/web/eslint-results.json
        retention-days: 7

  # E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: unit-integration-tests
    
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit, Mobile Chrome, Mobile Safari]

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: services/attendance/web/package-lock.json

    - name: 의존성 설치
      run: npm ci

    - name: Playwright 설치
      run: npx playwright install --with-deps ${{ matrix.project }}

    - name: 애플리케이션 빌드
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

    - name: E2E 테스트 실행
      run: npx playwright test --project=${{ matrix.project }} --reporter=html
      env:
        BASE_URL: http://localhost:3002
        NODE_ENV: test
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

    - name: E2E 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report-${{ matrix.project }}
        path: |
          services/attendance/web/test-results/
          services/attendance/web/playwright-report/
        retention-days: 7

  # 성능 테스트
  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: unit-integration-tests

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: services/attendance/web/package-lock.json

    - name: 의존성 설치
      run: npm ci

    - name: 애플리케이션 빌드
      run: npm run build
      env:
        NODE_ENV: production

    - name: 성능 테스트 실행
      run: npm test -- --testPathPattern="performance" --maxWorkers=1
      env:
        NODE_ENV: test

    - name: Lighthouse CI 실행
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './services/attendance/web/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: 성능 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: services/attendance/web/performance-results/
        retention-days: 7

  # 접근성 테스트
  accessibility-tests:
    name: 접근성 테스트
    runs-on: ubuntu-latest
    needs: unit-integration-tests

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: services/attendance/web/package-lock.json

    - name: 의존성 설치
      run: npm ci

    - name: Playwright 설치
      run: npx playwright install --with-deps chromium

    - name: 접근성 테스트 실행
      run: npx playwright test --project=accessibility
      env:
        BASE_URL: http://localhost:3002

    - name: Pa11y 접근성 테스트
      run: |
        npm install -g pa11y
        npm run dev &
        sleep 30
        pa11y http://localhost:3002 --reporter json > accessibility-report.json || true
        pa11y http://localhost:3002/login --reporter json >> accessibility-report.json || true
        pa11y http://localhost:3002/dashboard --reporter json >> accessibility-report.json || true

    - name: 접근성 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-results
        path: |
          services/attendance/web/accessibility-report.json
          services/attendance/web/test-results/
        retention-days: 7

  # 보안 테스트
  security-tests:
    name: 보안 테스트
    runs-on: ubuntu-latest

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: services/attendance/web/package-lock.json

    - name: 의존성 설치
      run: npm ci

    - name: npm audit 실행
      run: npm audit --audit-level moderate --production

    - name: Snyk 보안 스캔
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

    - name: OWASP ZAP 스캔
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:3002'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # 종합 품질 리포트 생성
  quality-report:
    name: 품질 리포트 생성
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, performance-tests, accessibility-tests, security-tests]
    if: always()

    steps:
    - name: 체크아웃
      uses: actions/checkout@v4

    - name: 모든 테스트 결과 다운로드
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts/

    - name: 품질 리포트 생성
      run: |
        cat > quality-report.md << 'EOF'
        # UI/UX 통합 테스트 품질 리포트
        
        ## 테스트 실행 요약
        - **실행 시간**: ${{ github.run_number }}
        - **커밋**: ${{ github.sha }}
        - **브랜치**: ${{ github.ref_name }}
        
        ## 테스트 결과
        ### 단위 테스트
        - ✅ 단위 테스트: ${{ needs.unit-integration-tests.result }}
        - ✅ 통합 테스트: ${{ needs.unit-integration-tests.result }}
        
        ### E2E 테스트
        - 🌐 크로스 브라우저: ${{ needs.e2e-tests.result }}
        
        ### 성능 테스트
        - ⚡ 성능 테스트: ${{ needs.performance-tests.result }}
        
        ### 접근성 테스트
        - ♿ 접근성 테스트: ${{ needs.accessibility-tests.result }}
        
        ### 보안 테스트
        - 🛡️ 보안 테스트: ${{ needs.security-tests.result }}
        
        ## 품질 메트릭
        - **코드 커버리지**: [Codecov 리포트 확인](https://codecov.io/gh/${{ github.repository }})
        - **성능 점수**: [Lighthouse 리포트 확인]
        - **접근성 점수**: [Pa11y 리포트 확인]
        
        ## 권장사항
        모든 테스트가 통과한 경우에만 배포를 진행하시기 바랍니다.
        EOF

    - name: 품질 리포트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md
        retention-days: 30

    - name: PR 코멘트 생성
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  # 배포 가능성 체크
  deployment-readiness:
    name: 배포 준비 상태 확인
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, performance-tests, accessibility-tests, security-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 배포 준비 상태 확인
      run: |
        echo "모든 테스트 결과 확인 중..."
        
        # 모든 테스트가 성공했는지 확인
        if [[ "${{ needs.unit-integration-tests.result }}" == "success" && \
              "${{ needs.e2e-tests.result }}" == "success" && \
              "${{ needs.performance-tests.result }}" == "success" && \
              "${{ needs.accessibility-tests.result }}" == "success" && \
              "${{ needs.security-tests.result }}" == "success" ]]; then
          echo "✅ 모든 테스트 통과 - 배포 준비 완료"
          echo "deployment_ready=true" >> $GITHUB_OUTPUT
        else
          echo "❌ 일부 테스트 실패 - 배포 불가"
          echo "deployment_ready=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: 배포 태그 생성
      if: steps.deployment-readiness.outputs.deployment_ready == 'true'
      run: |
        git tag "ui-ux-test-passed-$(date +%Y%m%d-%H%M%S)"
        git push origin --tags