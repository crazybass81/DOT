/**
 * Í≥ÑÏ†ï ÌôúÏÑ±Ìôî API ÌÖåÏä§Ìä∏ - TDD RED Phase
 * POST /api/master-admin/users/:id/reactivate
 */

import { NextRequest } from 'next/server';
import { createMocks } from 'node-mocks-http';
import { POST } from '@/app/api/master-admin/users/[id]/reactivate/route';
import { AccountStatus } from '@/types/suspension';

// Î™®ÌÇπ ÏÑ§Ï†ï
jest.mock('@/lib/supabase/server', () => ({
  createClient: jest.fn()
}));

jest.mock('@/lib/audit-logger', () => ({
  auditLogger: {
    log: jest.fn(),
    logPermissionDenied: jest.fn()
  },
  AuditAction: {
    USER_REACTIVATE: 'USER_REACTIVATE'
  },
  AuditResult: {
    SUCCESS: 'SUCCESS',
    FAILURE: 'FAILURE'
  }
}));

describe('POST /api/master-admin/users/[id]/reactivate - TDD RED Phase', () => {
  let mockSupabase: any;
  
  beforeEach(() => {
    mockSupabase = {
      auth: {
        getUser: jest.fn()
      },
      from: jest.fn(() => mockSupabase),
      select: jest.fn(() => mockSupabase),
      eq: jest.fn(() => mockSupabase),
      maybeSingle: jest.fn(),
      single: jest.fn(),
      update: jest.fn(() => mockSupabase),
      insert: jest.fn(() => mockSupabase),
      or: jest.fn(() => mockSupabase)
    };
    
    require('@/lib/supabase/server').createClient.mockReturnValue(mockSupabase);
  });

  describe('üî¥ Í∂åÌïú Í≤ÄÏ¶ù Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    test('3.1.1 Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê Ï†ëÍ∑º Ïãú 401 ÏóêÎü¨ Î∞òÌôò', async () => {
      // Given: Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©Ïûê
      mockSupabase.auth.getUser.mockResolvedValue({
        data: { user: null },
        error: new Error('Ïù∏Ï¶ù Ïã§Ìå®')
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'Ï†ïÏßÄ ÏÇ¨Ïú† Ìï¥Í≤∞Îê®',
          restoreData: true,
          notifyUser: true
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 401 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(401);
      expect(data.success).toBe(false);
      expect(data.error).toBe('Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
    });

    test('3.1.2 MASTER_ADMIN Í∂åÌïúÏù¥ ÏóÜÎäî ÏÇ¨Ïö©Ïûê Ï†ëÍ∑º Ïãú 403 ÏóêÎü¨ Î∞òÌôò', async () => {
      // Given: Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÏù¥ÏßÄÎßå MASTER_ADMIN Í∂åÌïú ÏóÜÏùå
      mockSupabase.auth.getUser.mockResolvedValue({
        data: { user: { id: 'admin123' } },
        error: null
      });

      mockSupabase.maybeSingle.mockResolvedValue({
        data: null, // MASTER_ADMIN Ïó≠Ìï† ÏóÜÏùå
        error: null
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate'
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 403 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(403);
      expect(data.success).toBe(false);
      expect(data.error).toBe('Ï†ëÍ∑º Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. MASTER_ADMIN Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
    });
  });

  describe('üî¥ ÎåÄÏÉÅ ÏÇ¨Ïö©Ïûê Í≤ÄÏ¶ù Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    beforeEach(() => {
      // Í∂åÌïú Í≤ÄÏ¶ù ÏÑ±Í≥µ ÏÑ§Ï†ï
      mockSupabase.auth.getUser.mockResolvedValue({
        data: { user: { id: 'admin123' } },
        error: null
      });

      mockSupabase.maybeSingle.mockResolvedValue({
        data: { role: 'MASTER_ADMIN' },
        error: null
      });
    });

    test('3.1.3 Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏÇ¨Ïö©Ïûê IDÎ°ú ÌôúÏÑ±Ìôî ÏãúÎèÑ Ïãú 404 ÏóêÎü¨', async () => {
      // Given: Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏÇ¨Ïö©Ïûê ID
      mockSupabase.single.mockResolvedValue({
        data: null,
        error: { code: 'PGRST116', message: 'No rows found' }
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/nonexistent/reactivate',
        body: {
          reason: 'Ï†ïÏßÄ Ìï¥Ï†ú'
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'nonexistent' } });
      const data = await response.json();

      // Then: 404 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(404);
      expect(data.success).toBe(false);
      expect(data.error).toBe('Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§.');
    });

    test('3.1.4 Ïù¥ÎØ∏ ÌôúÏÑ± ÏÉÅÌÉúÏù∏ Í≥ÑÏ†ï ÌôúÏÑ±Ìôî ÏãúÎèÑ', async () => {
      // Given: Ïù¥ÎØ∏ ÌôúÏÑ± ÏÉÅÌÉúÏù∏ ÏÇ¨Ïö©Ïûê
      mockSupabase.single.mockResolvedValue({
        data: {
          id: 'user123',
          status: AccountStatus.ACTIVE,
          email: 'user@example.com'
        },
        error: null
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'ÌôúÏÑ±Ìôî ÏãúÎèÑ'
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 409 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(409);
      expect(data.success).toBe(false);
      expect(data.error).toBe('Ïù¥ÎØ∏ ÌôúÏÑ± ÏÉÅÌÉúÏù∏ Í≥ÑÏ†ïÏûÖÎãàÎã§.');
    });

    test('3.1.5 ÏòÅÍµ¨ Ï∞®Îã®Îêú Í≥ÑÏ†ï ÌôúÏÑ±Ìôî ÏãúÎèÑ', async () => {
      // Given: ÏòÅÍµ¨ Ï∞®Îã®Îêú ÏÇ¨Ïö©Ïûê
      mockSupabase.single.mockResolvedValue({
        data: {
          id: 'user123',
          status: AccountStatus.PERMANENTLY_BANNED,
          email: 'banned@example.com'
        },
        error: null
      });

      // ÌôúÏÑ± Ï†ïÏßÄ Í∏∞Î°ù Ï°∞Ìöå
      mockSupabase.eq.mockReturnValue({
        ...mockSupabase,
        single: jest.fn().mockResolvedValue({
          data: {
            id: 'suspension123',
            duration: {
              type: 'PERMANENT'
            },
            status: 'ACTIVE'
          },
          error: null
        })
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'ÏòÅÍµ¨ Ï∞®Îã® Ìï¥Ï†ú ÏãúÎèÑ'
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 403 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(403);
      expect(data.success).toBe(false);
      expect(data.error).toBe('ÏòÅÍµ¨ Ï∞®Îã®Îêú Í≥ÑÏ†ïÏùÄ ÌäπÎ≥ÑÌïú ÏäπÏù∏ Ï†àÏ∞®Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
    });
  });

  describe('üî¥ ÌôúÏÑ± Ï†ïÏßÄ Í∏∞Î°ù Í≤ÄÏ¶ù Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    beforeEach(() => {
      // Í∂åÌïú Í≤ÄÏ¶ù Î∞è ÏÇ¨Ïö©Ïûê Ï°¥Ïû¨ ÌôïÏù∏ ÏÑ±Í≥µ ÏÑ§Ï†ï
      mockSupabase.auth.getUser.mockResolvedValue({
        data: { user: { id: 'admin123' } },
        error: null
      });

      mockSupabase.maybeSingle.mockResolvedValue({
        data: { role: 'MASTER_ADMIN' },
        error: null
      });

      mockSupabase.single.mockResolvedValue({
        data: {
          id: 'user123',
          status: AccountStatus.SUSPENDED,
          email: 'user@example.com'
        },
        error: null
      });
    });

    test('3.1.6 ÌôúÏÑ± Ï†ïÏßÄ Í∏∞Î°ùÏù¥ ÏóÜÎäî Ï†ïÏßÄÎêú Í≥ÑÏ†ï ÌôúÏÑ±Ìôî ÏãúÎèÑ', async () => {
      // Given: Ï†ïÏßÄ ÏÉÅÌÉúÏù¥ÏßÄÎßå ÌôúÏÑ± Ï†ïÏßÄ Í∏∞Î°ùÏù¥ ÏóÜÏùå (Îç∞Ïù¥ÌÑ∞ Î∂àÏùºÏπò)
      mockSupabase.eq.mockReturnValue({
        ...mockSupabase,
        single: jest.fn().mockResolvedValue({
          data: null,
          error: { code: 'PGRST116', message: 'No rows found' }
        })
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'Ï†ïÏßÄ Ìï¥Ï†ú'
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 409 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(409);
      expect(data.success).toBe(false);
      expect(data.error).toBe('ÌôúÏÑ± Ï†ïÏßÄ Í∏∞Î°ùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Îç∞Ïù¥ÌÑ∞ ÏùºÍ¥ÄÏÑ± Ïò§Î•òÏûÖÎãàÎã§.');
    });

    test('3.1.7 Î≥µÍµ¨ Ï°∞Í±¥Ïù¥ Ï∂©Ï°±ÎêòÏßÄ ÏïäÏùÄ Ï†ïÏßÄ Í≥ÑÏ†ï ÌôúÏÑ±Ìôî ÏãúÎèÑ', async () => {
      // Given: Î≥µÍµ¨ Ï°∞Í±¥Ïù¥ Ï∂©Ï°±ÎêòÏßÄ ÏïäÏùÄ Ï†ïÏßÄ Í∏∞Î°ù
      const futureDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
      
      mockSupabase.eq.mockReturnValue({
        ...mockSupabase,
        single: jest.fn().mockResolvedValue({
          data: {
            id: 'suspension123',
            duration: {
              type: 'TEMPORARY',
              endDate: futureDate.toISOString(),
              autoReactivate: false
            },
            status: 'ACTIVE',
            recovery_conditions: ['SECURITY_REVIEW_REQUIRED', 'USER_CONSENT_NEEDED']
          },
          error: null
        })
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'Ï°∞Í∏∞ ÌôúÏÑ±Ìôî ÏãúÎèÑ',
          conditions: [] // Î≥µÍµ¨ Ï°∞Í±¥ ÎØ∏Ï∂©Ï°±
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 422 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(422);
      expect(data.success).toBe(false);
      expect(data.error).toBe('Î≥µÍµ¨ Ï°∞Í±¥Ïù¥ Ï∂©Ï°±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      expect(data.missingConditions).toContain('SECURITY_REVIEW_REQUIRED');
    });
  });

  describe('üî¥ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    beforeEach(() => {
      // Í∏∞Î≥∏ Í≤ÄÏ¶ù ÏÑ±Í≥µ ÏÑ§Ï†ï
      mockSupabase.auth.getUser.mockResolvedValue({
        data: { user: { id: 'admin123' } },
        error: null
      });

      mockSupabase.maybeSingle.mockResolvedValue({
        data: { role: 'MASTER_ADMIN' },
        error: null
      });

      mockSupabase.single.mockResolvedValue({
        data: {
          id: 'user123',
          status: AccountStatus.SUSPENDED,
          email: 'user@example.com'
        },
        error: null
      });
    });

    test('3.1.8 ÌôúÏÑ±Ìôî ÏÇ¨Ïú† ÎàÑÎùΩ Ïãú 400 ÏóêÎü¨', async () => {
      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          // reason ÌïÑÎìú ÎàÑÎùΩ
          restoreData: true,
          notifyUser: true
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 400 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(400);
      expect(data.success).toBe(false);
      expect(data.error).toBe('ÌôúÏÑ±Ìôî ÏÇ¨Ïú†Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
    });

    test('3.1.9 ÌôúÏÑ±Ìôî ÏÇ¨Ïú†Í∞Ä ÎÑàÎ¨¥ ÏßßÏùÑ Îïå 400 ÏóêÎü¨', async () => {
      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'OK', // ÎÑàÎ¨¥ ÏßßÏùÄ ÏÇ¨Ïú†
          restoreData: true
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 400 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(400);
      expect(data.success).toBe(false);
      expect(data.error).toBe('ÌôúÏÑ±Ìôî ÏÇ¨Ïú†Îäî ÏµúÏÜå 10Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.');
    });
  });

  describe('üî¥ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïò§Î•ò Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    beforeEach(() => {
      // Î™®Îì† Í∏∞Î≥∏ Í≤ÄÏ¶ù ÏÑ±Í≥µ ÏÑ§Ï†ï
      mockSupabase.auth.getUser.mockResolvedValue({
        data: { user: { id: 'admin123' } },
        error: null
      });

      mockSupabase.maybeSingle.mockResolvedValue({
        data: { role: 'MASTER_ADMIN' },
        error: null
      });

      mockSupabase.single.mockResolvedValue({
        data: {
          id: 'user123',
          status: AccountStatus.SUSPENDED,
          email: 'user@example.com'
        },
        error: null
      });

      // ÌôúÏÑ± Ï†ïÏßÄ Í∏∞Î°ù Ï°¥Ïû¨
      mockSupabase.eq.mockReturnValue({
        ...mockSupabase,
        single: jest.fn().mockResolvedValue({
          data: {
            id: 'suspension123',
            duration: {
              type: 'TEMPORARY',
              endDate: new Date(Date.now() - 24 * 60 * 60 * 1000) // Ïù¥ÎØ∏ ÎßåÎ£åÎê®
            },
            status: 'ACTIVE'
          },
          error: null
        })
      });
    });

    test('3.1.10 Ï†ïÏßÄ Í∏∞Î°ù Ìï¥Ï†ú Ïã§Ìå® Ïãú 500 ÏóêÎü¨', async () => {
      // Given: Ï†ïÏßÄ Í∏∞Î°ù ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®
      mockSupabase.update.mockResolvedValue({
        data: null,
        error: { code: 'UPDATE_FAILED', message: 'Suspension update failed' }
      });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'Ï†ïÏßÄ Í∏∞Í∞Ñ ÎßåÎ£åÎ°ú Ïù∏Ìïú ÏûêÎèô Ìï¥Ï†ú',
          restoreData: true,
          notifyUser: true
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 500 ÏóêÎü¨ Î∞òÌôò
      expect(response.status).toBe(500);
      expect(data.success).toBe(false);
      expect(data.error).toBe('Ï†ïÏßÄ Ìï¥Ï†ú Ï≤òÎ¶¨ Ï§ë Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    });

    test('3.1.11 ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® Ïãú Î°§Î∞±', async () => {
      // Given: Ï†ïÏßÄ Í∏∞Î°ù Ìï¥Ï†úÎäî ÏÑ±Í≥µÌïòÏßÄÎßå ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®
      mockSupabase.update
        .mockResolvedValueOnce({
          data: [{ id: 'suspension123' }], // Ï†ïÏßÄ Í∏∞Î°ù Ìï¥Ï†ú ÏÑ±Í≥µ
          error: null
        })
        .mockResolvedValueOnce({
          data: null, // ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®
          error: { code: 'UPDATE_FAILED', message: 'User status update failed' }
        });

      const { req } = createMocks({
        method: 'POST',
        url: '/api/master-admin/users/user123/reactivate',
        body: {
          reason: 'Ï†ïÏßÄ Ìï¥Ï†ú ÏãúÎèÑ',
          restoreData: false,
          notifyUser: true
        }
      });

      // When: API Ìò∏Ï∂ú
      const response = await POST(req as NextRequest, { params: { id: 'user123' } });
      const data = await response.json();

      // Then: 500 ÏóêÎü¨ Î∞òÌôò Î∞è Î°§Î∞± Î©îÏãúÏßÄ
      expect(response.status).toBe(500);
      expect(data.success).toBe(false);
      expect(data.error).toBe('ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®. Ï†ïÏßÄ Ìï¥Ï†úÍ∞Ä Î°§Î∞±ÎêòÏóàÏäµÎãàÎã§.');
    });
  });

  describe('üî¥ ÏûêÎèô Ìï¥Ï†ú Ïä§ÏºÄÏ§Ñ Ï∑®ÏÜå Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    test('3.1.12 ÏûêÎèô Ìï¥Ï†ú Ïä§ÏºÄÏ§Ñ Ï∑®ÏÜå Ïã§Ìå® ÏãúÏóêÎèÑ ÌôúÏÑ±Ìôî ÏÑ±Í≥µ', async () => {
      // Given: ÏûêÎèô Ìï¥Ï†ú Ïä§ÏºÄÏ§ÑÏùÄ Ïã§Ìå®ÌïòÏßÄÎßå ÌôúÏÑ±ÌôîÎäî ÏÑ±Í≥µÌï¥Ïïº Ìï®
      // Ïù¥ ÌÖåÏä§Ìä∏Îäî Ïã§Ï†ú Ïä§ÏºÄÏ§ÑÎßÅ ÏãúÏä§ÌÖúÏù¥ Íµ¨ÌòÑÎêòÎ©¥ Ï∂îÍ∞ÄÎê† ÏòàÏ†ï
      expect(true).toBe(true); // ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
    });
  });

  describe('üî¥ ÏïåÎ¶º Î∞úÏÜ° Ïã§Ìå® ÌÖåÏä§Ìä∏', () => {
    test('3.1.13 ÏÇ¨Ïö©Ïûê ÏïåÎ¶º Î∞úÏÜ° Ïã§Ìå® ÏãúÏóêÎèÑ ÌôúÏÑ±Ìôî ÏÑ±Í≥µ but Í≤ΩÍ≥†', async () => {
      // Given: ÏïåÎ¶º Î∞úÏÜ°ÏùÄ Ïã§Ìå®ÌïòÏßÄÎßå ÌôúÏÑ±ÌôîÎäî ÏÑ±Í≥µÌï¥Ïïº Ìï®
      // Ïù¥ ÌÖåÏä§Ìä∏Îäî Ïã§Ï†ú ÏïåÎ¶º ÏãúÏä§ÌÖúÏù¥ Íµ¨ÌòÑÎêòÎ©¥ Ï∂îÍ∞ÄÎê† ÏòàÏ†ï
      expect(true).toBe(true); // ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
    });
  });
});