version: '3.8'

services:
  # Flutter Web Build Environment
  flutter-builder:
    build:
      context: .
      dockerfile: docker/Dockerfile.flutter
    volumes:
      - ./mobile/dot_attendance:/app
      - flutter-deps:/root/.pub-cache
    environment:
      - FLUTTER_WEB_CANVASKIT_FORCE_CPU_ONLY=true
      - FLUTTER_WEB_USE_SKIA=false
    command: |
      sh -c "
        cd /app &&
        flutter pub get &&
        dart run build_runner build --delete-conflicting-outputs &&
        flutter build web --release --dart-define=ENVIRONMENT=development
      "
    profiles:
      - build

  # Firebase Functions Development
  functions-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile.functions
    volumes:
      - ./mobile/dot_attendance/functions:/app
      - functions-deps:/app/node_modules
    ports:
      - "5001:5001"  # Firebase Functions
      - "9099:9099"  # Firebase Auth
      - "8080:8080"  # Firestore
      - "9199:9199"  # Firebase Storage
    environment:
      - FIRESTORE_EMULATOR_HOST=0.0.0.0:8080
      - FIREBASE_AUTH_EMULATOR_HOST=0.0.0.0:9099
      - FIREBASE_STORAGE_EMULATOR_HOST=0.0.0.0:9199
      - FUNCTIONS_EMULATOR_HOST=0.0.0.0:5001
      - NODE_ENV=development
    command: |
      sh -c "
        cd /app &&
        npm install &&
        npm run build &&
        firebase emulators:start --only functions,firestore,auth,storage
      "
    profiles:
      - dev

  # API Gateway Nginx
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - functions-dev
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
      - BACKEND_URL=functions-dev:5001
    profiles:
      - dev

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    profiles:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    profiles:
      - monitoring

  # Database Tools
  firebase-ui:
    image: node:18-alpine
    ports:
      - "4000:4000"
    volumes:
      - ./mobile/dot_attendance:/app
    working_dir: /app
    command: |
      sh -c "
        npm install -g firebase-tools &&
        firebase serve --only hosting --port 4000
      "
    depends_on:
      - functions-dev
    profiles:
      - dev

  # Testing Environment
  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    volumes:
      - ./mobile/dot_attendance:/app
      - test-results:/app/test-results
    environment:
      - CHROME_EXECUTABLE=/usr/bin/chromium-browser
      - FLUTTER_TEST_TIMEOUT=60s
    command: |
      sh -c "
        cd /app &&
        flutter pub get &&
        dart run build_runner build --delete-conflicting-outputs &&
        flutter test --coverage --reporter=json > test-results/results.json &&
        flutter test integration_test/
      "
    profiles:
      - test

  # Code Quality Tools
  code-analyzer:
    build:
      context: .
      dockerfile: docker/Dockerfile.analyzer
    volumes:
      - ./mobile/dot_attendance:/app
      - analysis-results:/app/analysis-results
    command: |
      sh -c "
        cd /app &&
        flutter pub get &&
        flutter analyze --write=analysis-results/analysis.txt &&
        dart format --set-exit-if-changed . &&
        dart run custom_lint > analysis-results/lint.txt
      "
    profiles:
      - analyze

  # Local DynamoDB for development (kept for backward compatibility)
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dot-dynamodb-local
    ports:
      - "8000:8000"
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=ap-northeast-2
    command: "-jar DynamoDBLocal.jar -sharedDb -inMemory"
    volumes:
      - dynamodb-data:/data
    networks:
      - dot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - legacy

  # LocalStack for full AWS services (optional, more comprehensive)
  localstack:
    image: localstack/localstack:latest
    container_name: dot-localstack
    ports:
      - "4566:4566"  # LocalStack Gateway
      - "4571:4571"  # Elasticsearch
    environment:
      - SERVICES=dynamodb,s3,lambda,cognito,ses,apigateway
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=ap-northeast-2
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - localstack-data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dot-network
    profiles:
      - legacy

volumes:
  flutter-deps:
    driver: local
  functions-deps:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  test-results:
    driver: local
  analysis-results:
    driver: local
  dynamodb-data:
    driver: local
  localstack-data:
    driver: local

networks:
  dot-network:
    driver: bridge
  default:
    name: dot-attendance-network
    driver: bridge